# postgres
alias poston="pg_ctl start -D /home/linuxbrew/.linuxbrew/var/postgres"
alias postoff="pg_ctl stop -D /home/linuxbrew/.linuxbrew/var/postgres"
# pass
alias pim="pass insert -m"
# command to open one file from the commandline
alias open='xdg-open'
# alias cat to bat if installed
if hash bat 2>/dev/null; then
  alias cat="bat"
fi
if type nvim > /dev/null 2>&1; then
  alias vim='nvim'
fi
alias ts="tmuxinator start"

# To be run as sudo su
alias free_mem="sync && echo 3 > /proc/sys/vm/drop_caches"
alias free_swap="swapoff -a && swapon -a"

# Youtube Dl music extraction
mp3 () {
	youtube-dl --no-check-certificate --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 -o '~/Music/youtube/%(title)s.%(ext)s' "$1"
}
# Playlist
mp3p () {
	youtube-dl --geo-bypass --no-check-certificate --yes-playlist --socket-timeout 60 --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 -o '~/Music/youtube/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' "$1"
}
video-list () {
	youtube-dl --geo-bypass --no-check-certificate --yes-playlist --socket-timeout 60 -o '~/Music/youtube/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' "$1"
}

alias stale_branches='git branches --sort=committerdate --merged | grep '\''Tommaso Patrizi'\'' | awk '\''{print $6}'\'' | sed '\''s/origin\///g'\'' | xargs echo' 
alias stale_branches_r='git branches --sort=committerdate --merged | grep '\''Tommaso Patrizi'\'' | awk '\''{print $6}'\'' | xargs echo' 

# PostGIS install
function getpostigs () {
    wget -q -P tmp/ https://github.com/postgis/postgis/archive/"$@".tar.gz
    tar xvzf tmp/"$@".tar.gz -C tmp/
    cd tmp/postgis-"$@"
    if [[ ! -a ./configure ]]; then
      ./autogen.sh
    fi
    eval ./configure `pg_config --configure`
    make
    make install
    cd ../..
    rm -rf tmp/
}

function cloc-git() {
  git clone --depth 1 "$1" temp-linecount-repo &&
    printf "('temp-linecount-repo' will be deleted automatically)\n\n\n" &&
    cloc temp-linecount-repo &&
    rm -rf temp-linecount-repo
}

fdiff() {
  preview="git diff $@ --color=always -- {-1}"
  git diff $@ --name-only | fzf -m --ansi --preview $preview
}

gch() {
 git checkout "$(git branch --all | fzf| tr -d '[:space:]')"
}

# using ripgrep combined with preview
# find-in-file - usage: fif <searchTerm>
fif() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

# Binary Systems
alias bs_dbs='ruby utils/scripts/dumps_list.rb'
alias dc='docker-compose -f docker-compose.common.yml -f docker-compose.development.yml --env-file ~/.docker.env up --build'

function ndeploy() {
  cd /home/tommasop/code/work/binary_system/bs_omniscient
  ./run_deployer.sh ./bin/deployer.sh $1 deploy
  cd -
}
